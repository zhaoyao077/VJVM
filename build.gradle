import java.nio.file.Files
import java.util.function.Consumer
import java.util.jar.JarOutputStream
import java.util.zip.ZipEntry

plugins {
  id 'application'
  id "io.freefair.lombok" version '6.3.0'
}

group = 'edu.nju.se'
version = '0.0.1'

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
  maven {
    url 'https://maven.aliyun.com/repository/public/'
  }
}

dependencies {
  implementation 'org.apache.commons:commons-lang3:3.12.0'
  implementation 'org.apache.commons:commons-text:1.9'
  implementation 'info.picocli:picocli:4.6.2'

  testImplementation 'org.junit.jupiter:junit-jupiter:5.8.2'

  annotationProcessor 'info.picocli:picocli-codegen:4.6.2'
}

compileJava {
  options.compilerArgs += ["-Aproject=${project.group}/${project.name}"]
}

application {
  mainClass = 'vjvm.vm.Main'
}

jar {
  manifest {
    attributes 'Main-Class': 'vjvm.vm.Main'
  }

  duplicatesStrategy('exclude')
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  }
}

tasks.register('buildTestRes') {
  dependsOn 'testClasses'

  doLast {
    var srcs = file('src/test/java').toPath()
    var classes = file("$buildDir/classes/java/test").toPath()
    var dst = file("$buildDir/testres").toPath()

    Consumer<File> copyOrZip
    copyOrZip = {
      var p = it.toPath()
      var relpath = classes.relativize(p)
      var dir = dst.resolve(relpath).parent

      if (!it.directory) {
        println "cp: $p -> $dir/${p.toFile().name}"
        copy { from p; into dir }
      } else if (Files.exists(srcs.resolve("$relpath/.mkjar"))) {
        var jarPath = file("$dst/${relpath}.jar")
        println "jar: $p -> $jarPath"

        jarPath.parentFile.mkdirs()
        var jar = new JarOutputStream(new FileOutputStream(jarPath))

        Files.walk(p)
          .filter({
            var f = it.toFile()
            return !f.isDirectory() && f.name != ".mkjar"
          })
          .forEach({
            var entry = new ZipEntry("${classes.relativize(it)}")
            jar.putNextEntry(entry)
            Files.copy(it, jar)
            jar.closeEntry()
          })
        jar.close()
      } else {
        Arrays.stream(it.listFiles()).forEach(copyOrZip)
      }
    }

    copyOrZip classes.toFile()
  }
}

test {
  dependsOn 'buildTestRes'
  environment 'VJVM_TESTRES_PATH', "$buildDir/testres"
  useJUnitPlatform()
}
